{"version":3,"sources":["components/Map.js","App.js","serviceWorker.js","index.js"],"names":["feature_area","feature","topojson","geometry","coordinates","MyMap","props","state","coords","lat","lng","zoom","Municipios","Municipios_topojson","objects","Munic","features_with_bbox","features","map","idx","arr","coors","xs","cur","ys","bbox","x","Math","min","max","y","geometries","neighbors_idxs","point","this","all_cities","total_area","point_city","filter","point_in_bbox","find","vs","inside","i","j","length","xi","yi","xj","yj","point_in_polygon","cities","initial_city","target_area","pushed_candidates","all_cities_ids","id","candidates_with_area","target","findIndex","find_neighbors","reduce","acc","cur2","includes","city","area","sort","a","b","candidate","push","fill_area","console","log","Map","center","style","width","height","onclick","e","setState","latlng","TileLayer","attribution","url","GeoJSON","key","data","stroke","color","Component","App","incidents","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f1006b64.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Map, TileLayer, Marker, Popup, GeoJSON } from 'react-leaflet'\nimport 'leaflet/dist/leaflet.css';\nimport * as topojson from \"topojson\";\nimport Municipios_topojson from './municipio.json'\n\nfunction point_in_polygon(point, vs) {\n  // ray-casting algorithm based on\n  // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n  \n  var x = point[0], y = point[1];\n  \n  var inside = false;\n  for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {\n      var xi = vs[i][0], yi = vs[i][1];\n      var xj = vs[j][0], yj = vs[j][1];\n      \n      var intersect = ((yi > y) != (yj > y))\n          && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n      if (intersect) inside = !inside;\n  }\n  \n  return inside;\n};\n\nfunction geojson_bbox(features){\n  return features.map((feature, idx, arr)=>{\n    const coors = feature.geometry.coordinates[0]\n    const xs = coors.map((cur, idx, arr)=>(cur[0]))\n    const ys = coors.map((cur, idx, arr)=>(cur[1]))\n    \n    return {\n      ...feature,\n      geometry: {\n        ...feature.geometry,\n        bbox: {\n          x: [Math.min(...xs), Math.max(...xs)], \n          y: [Math.min(...ys), Math.max(...ys)]\n        }\n      }\n    }\n  })\n}\n\nfunction point_in_bbox(point, bbox){\n  return (\n    (bbox.x[0]<point[0]) && (point[0]<bbox.x[1]) &&\n    (bbox.y[0]<point[1]) && (point[1]<bbox.y[1]))\n}\n\nfunction find_point_region(point, features){\n  const in_bbox = features.filter((cur, idx, arr)=>point_in_bbox(point, cur.geometry.bbox))\n  return in_bbox.find((cur, idx, arr)=>point_in_polygon(point, cur.geometry.coordinates[0]))\n}\n\nfunction find_neighbors(target, cities, neighbors_idxs){\n  // isso aqui pega o neighrbors calculado no topojjson e usa no geojson. Pode ser que ordem mude\n  // e vai gerar um bug\n  const idx = cities.findIndex((cur, idx, arr) => (cur.id === target.id))\n  const feature_neighbors = neighbors_idxs[idx].map((cur, idx, arr)=>cities[cur])\n  return feature_neighbors\n}\n\nfunction feature_area(feature){\n  return topojson.sphericalRingArea(feature.geometry.coordinates[0]) * 6371**2\n}\n\nfunction fill_area(cities, neighbors_idxs, initial_city, target_area){\n  // TODO: Deal with case where the selected city is bigger than target_area or the final \n  // total area is too far from target (because every city is too big)\n  let pushed_candidates = [initial_city]\n  const all_cities = [initial_city]\n  let candidates = []\n  let total_area = feature_area(initial_city)\n  while (pushed_candidates.length > 0){\n    //populate candidates\n    let all_cities_ids = all_cities.map(cur=>cur.id)\n    candidates = pushed_candidates\n      .map(cur=>find_neighbors(cur, cities, neighbors_idxs))\n      .reduce((acc, cur, idx, arr)=>([...acc, ...cur]), [])\n      .filter((cur, idx, arr)=>arr.findIndex(cur2=>cur2.id==cur.id)==idx)\n      .filter(cur=>!all_cities_ids.includes(cur.id))\n    //calculate area for candidates\n    const candidates_with_area = candidates.map(cur=>({\n      city: cur,\n      area: feature_area(cur)\n    })).sort((a, b) => (b.area - a.area))\n    //Try to push candidates\n    pushed_candidates = []\n    for (let candidate of candidates_with_area){\n      if (total_area + candidate.area <= target_area){\n        all_cities.push(candidate.city)\n        total_area += candidate.area\n        pushed_candidates.push(candidate.city)\n      } \n    }\n  }\n  return [all_cities, total_area]\n\n}\n\nexport default class MyMap extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      coords: {\n        lat: null,\n        lng: null\n      },\n      lat: -12.503748,\n      lng: -55.149975,\n      zoom: 4,\n    }\n    const Municipios = topojson.feature(Municipios_topojson, Municipios_topojson.objects.Munic) \n    this.features_with_bbox = geojson_bbox(Municipios.features)\n    const geometries = Municipios_topojson.objects.Munic.geometries\n    this.neighbors_idxs = topojson.neighbors(geometries)\n  }\n\n  render() {\n    const {lat, lng} = this.state.coords\n    const features_with_bbox = this.features_with_bbox\n    const neighbors_idxs = this.neighbors_idxs\n    var all_cities = null\n    var total_area = null\n    if (lng !== null){\n      const point_city = find_point_region([lng, lat], features_with_bbox)\n      if (point_city){\n        var [all_cities, total_area] = fill_area(features_with_bbox, neighbors_idxs, point_city, 23000)    \n      }\n    }\n    \n    console.log('rendering', total_area)\n    return (\n      <Map \n        center={[this.state.lat, this.state.lng]} \n        zoom={this.state.zoom} \n        style={{ width: '100%', height: '100%',}}\n        onclick={(e)=>this.setState({coords:e.latlng})}\n      >\n      <TileLayer\n        attribution='&copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n      {all_cities !== null && \n        <GeoJSON \n          key={all_cities.map(cur=>cur.id).reduce((acc, cur)=>acc+cur)} \n          data={all_cities} \n          style={{stroke: false, color:'#f00'}}/>}\n      </Map>\n      )\n  }\n}","import React, { Component, Fragment } from 'react';\n// import axios from 'axios';\nimport Map from './components/Map'\n\n\nclass App extends Component {\n  state = {\n    incidents: [],\n  }\n  render() {\n    return (\n      <Map incidents={this.state.incidents}/>\n    );\n  }\n }\n export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}